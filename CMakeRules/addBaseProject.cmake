macro(getMSVCappend)
    if(DEFINED MSVC)
        if (MSVC)
            if (MSVC10)
                set (MSVC_APPEND "vc100")
            elseif (MSVC11)
                set (MSVC_APPEND "vc110")
            elseif (MSVC12)
                set (MSVC_APPEND "vc120")
            else()
                set (MSVC_APPEND ${MSVC_VERSION})
            endif()
        endif()
    endif()
endmacro(getMSVCappend)
macro(addBaseProject)

# Compiler detection and rules
if (${CMAKE_CXX_COMPILER_ID} MATCHES "Clang")
	SET (CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "-std=c++11")
  # using Clang
elseif (${CMAKE_CXX_COMPILER_ID} MATCHES "GNU")
  # using GCC
	SET (CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "-std=c++11 -fPIC")
elseif (${CMAKE_CXX_COMPILER_ID} MATCHES "Intel")
  # using Intel C++
  SET (CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "-std=c++11")
elseif (${CMAKE_CXX_COMPILER_ID} MATCHES "MSVC")
  # using Visual Studio C++
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
endif()

# If doing a debug build, set the appropriate compiler defines
IF("${CMAKE_BUILD_TYPE}" MATCHES "Debug")
    add_definitions(-D_DEBUG)
ENDIF()

    set(configappend "")
    if (CMAKE_CL_64)
        set(configappend "${configappend}_x64")
    elseif(${CMAKE_SYSTEM_PROCESSOR} MATCHES "64")
        set(configappend "${configappend}_x64")
    else()
        set(configappend "${configappend}_x86")
    endif()
    if (MSVC)
        getMSVCappend()
        set(configappend "${configappend}_${MSVC_APPEND}")
        add_definitions(-DCONF="$(Configuration)${configappend}")
        set(CONF CONF)
    elseif (MINGW)
        set(configappend "${configappend}_mingw")
        add_definitions(-DCONF="${CMAKE_BUILD_TYPE}${configappend}")
        set(CONF "\"${CMAKE_BUILD_TYPE}${configappend}\"")
    else()
        set(configappend "${configappend}_${CMAKE_CXX_COMPILER_ID}")
        add_definitions(-DCONF="${CMAKE_BUILD_TYPE}${configappend}")
        set(CONF "\"${CMAKE_BUILD_TYPE}${configappend}\"")
    endif()
    #message("${configappend}")

endmacro(addBaseProject)

